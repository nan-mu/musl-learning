#!/bin/sh

usage() {
    cat <<EOF
用法: $0 [选项]... [变量=值]... [目标]

若希望指定诸如 CC、CFLAGS、CROSS_COMPILE 等环境变量的值，
可以使用如下形式：变量名=值。详情请参见下文。

方括号中的内容为默认值。

译者按：
  - [detected]表示默认情况由程序自动生成合理的值
  - [auto] 表示自动选择musl推荐的值
  - TARGET 表示架构类型，musl支持：（大部分支持项是有条件的）
      - x86 / IA32 (i386)
      - x86_64 / AMD64 (x86_64, x32)
      - ARM (arm[eb][hf])
      - AArch64 (aarch64[_be])
      - MIPS (mips[r6][el][-sf], mips64[r6][el][-sf], mipsn32[r6][el][-sf])
      - PowerPC (powerpc[-sf], powerpc64[le])
      - RISC-V (riscv64[-sp|-sf])
      - Microblaze (microblaze[el])
      - OpenRISC 1000 (or1k)
      - SuperH (sh[eb][-nofpu][-fdpic])*
      - IBM S/390 (s390x)：仅支持 64 位
      - Motorola 680x0 (m68k)：仅支持硬浮动
  - PREFIX 与其记作前缀，不如记作根目录
  - wrapper 译作包装器，比如直接使用的gcc就是一种包装器，它包装了预处理，汇编，编译，加密等步骤

配置项：
  --srcdir=DIR            musl 源代码目录 [当前目录]

安装文件存放目录：
  --prefix=PREFIX         首要的安装目录前缀 [/usr/local/musl]
  --exec-prefix=EPREFIX   可执行文件的安装目录前缀 [PREFIX]

安装目录子目录配置：
  --bindir=DIR            用户的可执行文件 [EPREFIX/bin]
  --libdir=DIR            供链接器使用的静态库目录 [PREFIX/lib] # REVIEW: 需要核实是否真全是静态库
  --includedir=DIR        供C编译器使用的头文件目录 [PREFIX/include]
  --syslibdir=DIR         动态库的位置 [/lib] （文档表示应该在不可能于/lib安装的时候才应该覆盖这个值）

系统类型：
  --target=TARGET         配置运行主机的 TARGET [detected]
  --host=HOST             与 --target 作用相同
  --build=BUILD           用于构建的架构类型；一般只在交叉编译时使用

可选功能项:
  --enable-optimize=...   使用给定的组建以优化编译速度（并非大小） [auto] # REVIEW: 速度是使用musl的速度还是编译速度？大小也一样
  --enable-debug          启用则将以debug模式进行构建 [disabled] （也可以手动添加-g在CFLAGS。未来还可能添加更多调试功能）
  --disable-warnings      启用后构建时将输出musl推荐的警告 [enabled]
  --enable-wrapper=...    使用给定的编译器包装器 [auto] 
  --disable-shared        在不需要libc.so时取消构建动态库libc.so；这将缩短一半的构建时间 [enabled]
  --disable-static        在不需要libc.a 时取消构建静态库libc.a ；这将缩短一半的构建时间 [enabled]

可选内容:
  --with-malloc=...       使用给定的malloc [mallocng]

一些关键环境变量:
  CC                      用于替换默认的C编译器 [detected]
  CFLAGS                  用于传递自定义选项给C编译器 [-Os -pipe ...]
  CROSS_COMPILE           交叉编译器或工具链的前缀 [none]
  LIBCC                   添加编译运行时库（译者按：在提交记录中有说在这里可以配置为llvm的工具链） [detected]

使用这些变量来覆盖 configure（本脚本）所做的选择。

EOF
    exit 0
}

# 辅助函数

quote() {
    tr '\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && {
$1
EOF
        echo "$1"
        return 0
    }
    printf %s\\n "$1" | sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" -e "s#^'\([-[:alnum:]_,./:]*\)=\(.*\)\$#\1='\2#"
}
echo() { printf "%s\n" "$*"; }
fail() {
    echo "$*"
    exit 1
}
fnmatch() { eval "case \"\$2\" in $1) return 0 ;; *) return 1 ;; esac"; }
cmdexists() { type "$1" >/dev/null 2>&1; }
trycc() { test -z "$CC" && cmdexists "$1" && CC=$1; }

stripdir() {
    while eval "fnmatch '*/' \"\${$1}\""; do eval "$1=\${$1%/}"; done
}

trycppif() {
    printf "检查 %s 是否被预处理器接受... " "$1"
    echo "typedef int x;" >"$tmpc"
    echo "#if $1" >>"$tmpc"
    echo "#error yes" >>"$tmpc"
    echo "#endif" >>"$tmpc"
    if $CC $2 -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
        printf "否\n"
        return 1
    else
        printf "是\n"
        return 0
    fi
}

tryflag() {
    printf "检查标志 %s 是否被编译器接受... " "$2"
    echo "typedef int x;" >"$tmpc"
    if $CC $CFLAGS_TRY $2 -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
        printf "成功\n"
        eval "$1=\"\${$1} \$2\""
        eval "$1=\${$1# }"
        return 0
    else
        printf "失败\n"
        return 1
    fi
}

tryldflag() {
    printf "检查标志 %s 是否被链接器接受... " "$2"
    echo "typedef int x;" >"$tmpc"
    if $CC $LDFLAGS_TRY -nostdlib -shared "$2" -o /dev/null "$tmpc" >/dev/null 2>&1; then
        printf "成功\n"
        eval "$1=\"\${$1} \$2\""
        eval "$1=\${$1# }"
        return 0
    else
        printf "失败\n"
        return 1
    fi
}

# 实际脚本的开头

CFLAGS_C99FSE=
CFLAGS_AUTO=
CFLAGS_MEMOPS=
CFLAGS_NOSSP=
CFLAGS_TRY=
LDFLAGS_AUTO=
LDFLAGS_TRY=
OPTIMIZE_GLOBS=
srcdir=
prefix=/usr/local/musl
exec_prefix='$(prefix)'
bindir='$(exec_prefix)/bin'
libdir='$(prefix)/lib'
includedir='$(prefix)/include'
syslibdir='/lib'
tools=
tool_libs=
build=
target=
optimize=auto
debug=no
warnings=yes
shared=auto
static=yes
wrapper=auto
gcc_wrapper=no
clang_wrapper=no
malloc_dir=mallocng

for arg; do
    case "$arg" in
    --help | -h) usage ;;
    --srcdir=*) srcdir=${arg#*=} ;;
    --prefix=*) prefix=${arg#*=} ;;
    --exec-prefix=*) exec_prefix=${arg#*=} ;;
    --bindir=*) bindir=${arg#*=} ;;
    --libdir=*) libdir=${arg#*=} ;;
    --includedir=*) includedir=${arg#*=} ;;
    --syslibdir=*) syslibdir=${arg#*=} ;;
    --enable-shared | --enable-shared=yes) shared=yes ;;
    --disable-shared | --enable-shared=no) shared=no ;;
    --enable-static | --enable-static=yes) static=yes ;;
    --disable-static | --enable-static=no) static=no ;;
    --enable-optimize) optimize=yes ;;
    --enable-optimize=*) optimize=${arg#*=} ;;
    --disable-optimize) optimize=no ;;
    --enable-debug | --enable-debug=yes) debug=yes ;;
    --disable-debug | --enable-debug=no) debug=no ;;
    --enable-warnings | --enable-warnings=yes) warnings=yes ;;
    --disable-warnings | --enable-warnings=no) warnings=no ;;
    --enable-wrapper | --enable-wrapper=yes) wrapper=detect ;;
    --enable-wrapper=all)
        wrapper=yes
        gcc_wrapper=yes
        clang_wrapper=yes
        ;;
    --enable-wrapper=gcc)
        wrapper=yes
        gcc_wrapper=yes
        ;;
    --enable-wrapper=clang)
        wrapper=yes
        clang_wrapper=yes
        ;;
    --disable-wrapper | --enable-wrapper=no) wrapper=no ;;
    --enable-gcc-wrapper | --enable-gcc-wrapper=yes)
        wrapper=yes
        gcc_wrapper=yes
        ;;
    --disable-gcc-wrapper | --enable-gcc-wrapper=no) wrapper=no ;;
    --with-malloc=*) malloc_dir=${arg#*=} ;;
    --enable-* | --disable-* | --with-* | --without-* | --*dir=*) ;;
    --host=* | --target=*) target=${arg#*=} ;;
    --build=*) build=${arg#*=} ;;
    -*) echo "$0: unknown option $arg" ;;
    AR=*) AR=${arg#*=} ;;
    RANLIB=*) RANLIB=${arg#*=} ;;
    CC=*) CC=${arg#*=} ;;
    CFLAGS=*) CFLAGS=${arg#*=} ;;
    CPPFLAGS=*) CPPFLAGS=${arg#*=} ;;
    LDFLAGS=*) LDFLAGS=${arg#*=} ;;
    CROSS_COMPILE=*) CROSS_COMPILE=${arg#*=} ;;
    LIBCC=*) LIBCC=${arg#*=} ;;
    *=*) ;;
    *)
        build=$arg
        target=$arg
        ;;
    esac
done

for i in srcdir prefix exec_prefix bindir libdir includedir syslibdir; do
    stripdir $i
done

#
# 为了避免编译过程污染源代码目录，进行检查并输出一个干净的目录
#
if test -z "$srcdir"; then
    srcdir="${0%/configure}"
    stripdir srcdir
fi
abs_builddir="$(pwd)" || fail "$0: 无法确定工作目录"
abs_srcdir="$(cd $srcdir && pwd)" || fail "$0: 无效的源代码目录 $srcdir"
test "$abs_srcdir" = "$abs_builddir" && srcdir=.
test "$srcdir" != "." && test -f Makefile && test ! -h Makefile && fail "$0: 工作目录中已经存在 Makefile 文件"

#
# 得到一个可用的临时文件名
#
i=0
set -C
while :; do
    i=$(($i + 1))
    tmpc="./conf$$-$PPID-$i.c"
    2>|/dev/null >"$tmpc" && break
    test "$i" -gt 50 && fail "$0: 无法创建临时文件 $tmpc"
done
set +C
trap 'rm "$tmpc"' EXIT INT QUIT TERM HUP

#
# 检查要求的malloc实现是否存在
#
test -d "$srcdir/src/malloc/$malloc_dir" ||
    fail "$0: 错误：选择的malloc实现 '$malloc_dir' 并不存在"

#
# 检查是否正在进行交叉编译
# 并在 CROSS_COMPILE 为空的时候设定一个默认值
#
test "$target" &&
    test "$target" != "$build" &&
    test -z "$CROSS_COMPILE" &&
    CROSS_COMPILE="$target-"

#
# 找到一个可用的C编译器
#
printf "检查C编译器... "
trycc ${CROSS_COMPILE}gcc
trycc ${CROSS_COMPILE}c99
trycc ${CROSS_COMPILE}cc
printf "%s\n" "$CC"
test -n "$CC" || {
    echo "$0: 无法找到一个正确的C编译器"
    exit 1
}

printf "检查编译器是否正常... "
echo "typedef int x;" >"$tmpc"
if output=$($CC $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" 2>&1); then
    printf "是\n"
else
    printf "失败；编译器输出为：\n%s\n" "$output"
    exit 1
fi

#
# 找出可用于强制启用未知标志的标志可选项
# 提交记录中表示如clang这类编译器在接受未知标志时不会报错，但之后这个错误可能会在之后输出。
# 这会破坏处理输出的程序，所以我们需要一个标志来强制启用未知标志报错。
#
tryflag CFLAGS_TRY -Werror=unknown-warning-option
tryflag CFLAGS_TRY -Werror=unused-command-line-argument
tryflag CFLAGS_TRY -Werror=ignored-optimization-argument
tryldflag LDFLAGS_TRY -Werror=unknown-warning-option
tryldflag LDFLAGS_TRY -Werror=unused-command-line-argument

#
# 使用的编译器是gcc还是clang来选择使用的包装器
#
printf "检查C编译器类型... "
cc_ver="$(LC_ALL=C $CC -v 2>&1)"
cc_family=unknown
if fnmatch '*gcc\ version*' "$cc_ver"; then
    cc_family=gcc
elif fnmatch '*clang\ version*' "$cc_ver"; then
    cc_family=clang
fi
echo "$cc_family"

#
# 找到用于构建的工具链包装器
#
if test "$wrapper" = auto || test "$wrapper" = detect; then
    echo "#include <stdlib.h>" >"$tmpc"
    echo "#if ! __GLIBC__" >>"$tmpc"
    echo "#error no" >>"$tmpc"
    echo "#endif" >>"$tmpc"
    printf "检查用于构建的工具链包装器... "
    if test "$wrapper" = auto && ! $CC -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
        echo "无"
    elif test "$cc_family" = gcc; then
        gcc_wrapper=yes
        echo "gcc"
    elif test "$cc_family" = clang; then
        clang_wrapper=yes
        echo "clang"
    else
        echo "无"
        if test "$wrapper" = detect; then
            fail "$0: 找不到一个适合的包装器"
        fi
    fi
fi

if test "$gcc_wrapper" = yes; then
    tools="$tools obj/musl-gcc"
    tool_libs="$tool_libs lib/musl-gcc.specs"
fi
if test "$clang_wrapper" = yes; then
    tools="$tools obj/musl-clang obj/ld.musl-clang"
fi

#
# 找到编译目标平台架构
#
printf "检查编译目标架构类型... "
test -n "$target" || target=$($CC -dumpmachine 2>/dev/null) || target=unknown
printf "%s\n" "$target"

#
# $target 转化为环境变量 ARCH
#
case "$target" in
# 尽早进行匹配，以简化 32 位架构的构建配置
arm*) ARCH=arm ;;
aarch64*) ARCH=aarch64 ;;
i?86-nt32*) ARCH=nt32 ;;
i?86*) ARCH=i386 ;;
x86_64-x32* | x32* | x86_64*x32) ARCH=x32 ;;
x86_64-nt64*) ARCH=nt64 ;;
x86_64*) ARCH=x86_64 ;;
loongarch64*) ARCH=loongarch64 ;;
m68k*) ARCH=m68k ;;
mips64* | mipsisa64*) ARCH=mips64 ;;
mips*) ARCH=mips ;;
microblaze*) ARCH=microblaze ;;
or1k*) ARCH=or1k ;;
powerpc64* | ppc64*) ARCH=powerpc64 ;;
powerpc* | ppc*) ARCH=powerpc ;;
riscv64*) ARCH=riscv64 ;;
riscv32*) ARCH=riscv32 ;;
sh[1-9bel-]* | sh | superh*) ARCH=sh ;;
s390x*) ARCH=s390x ;;
unknown) fail "$0: 无法得到编译目标架构；尝试 $0 --target=..." ;;
*) fail "$0: 未知或不支持的结构：\"$target\"" ;;
esac

#
# 尝试配置一个符合C99标准的freestanding环境
# 译者按：freestanding相当于rust中的no_std（倒反天罡）
#
tryflag CFLAGS_C99FSE -std=c99
tryflag CFLAGS_C99FSE -nostdinc
tryflag CFLAGS_C99FSE -ffreestanding ||
    tryflag CFLAGS_C99FSE -fno-builtin
tryflag CFLAGS_C99FSE -fexcess-precision=standard ||
    { test "$ARCH" = i386 && tryflag CFLAGS_C99FSE -ffloat-store; }
tryflag CFLAGS_C99FSE -frounding-math

#
# 关于编程语义，我们希望坚持我们的源代码遵循 C 语言的基于类型的别名规则，
# 但大多数，甚至几乎所有的实际编译器，都已知或怀疑在其基于类型的别名分析中
# 存在严重错误。参见 GCC 的 bug 107107。
# 译者按：别名规则其实是C的指针类型检查。看起来这个检查的逻辑有bug。
#
tryflag CFLAGS_C99FSE -fno-strict-aliasing

#
# 如果定义了 __GNUC__，我们可能会使用 may_alias 属性，
# 因此如果编译器定义了 __GNUC__ 但没有提供它，
# 则必须在 CFLAGS 中将其定义去除。
# 译者按：同样是别名规则的问题，may_alias是GCC对于别名规则的一种优化方案，看起来这个方案还不是一个标准
#
printf "检查编译器是否需要禁用 attribute((may_alias))... "
cat >"$tmpc" <<EOF
typedef int
#ifdef __GNUC__
__attribute__((__may_alias__))
#endif
x;
EOF
if $CC $CFLAGS_C99FSE $CPPFLAGS $CFLAGS \
    -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
    printf "否\n"
else
    printf "是\n"
    CFLAGS_C99FSE="$CFLAGS_C99FSE -D__may_alias__="
fi

#
# GNU 工具链默认假设未标记的文件需要一个可执行栈，
# 这可能会在与这些目标文件链接的程序中暴露漏洞。修复此问题。
# 译者按：
# * 可执行栈表示在栈上允许执行代码，这是一种常见的攻击手段。
# * -Wa表示向汇编器传递参数，--noexecstack表示不允许在栈上执行代码
#
tryflag CFLAGS_C99FSE -Wa,--noexecstack

#
# 检查是否有选项可以禁用栈保护器，这在一些早期引导的翻译单元中需要禁用。
# 如果没有找到，这不是一个错误；我们假设工具链不支持栈保护。
# 译者按：简单来说栈保护器会影响memcpy 和 memset 等函数的行为，
# 所以在一些特殊情况下需要禁用它。以及栈保护器可能会增加一些开销。
#
tryflag CFLAGS_NOSSP -fno-stack-protector

#
# 检查是否需要选项来防止编译器生成自引用版本的 memcpy、memmove、memcmp 和 memset。
# 实际上，我们应该添加一个检查，以确定此选项是否足够，如果不够，则添加一个宏，
# 使用 volatile 来削弱这些函数...
# 译者按：memcpy或者memset会在循环优化的时候被调用，那么musl自己的memcpy就自引用问题了。
#
tryflag CFLAGS_MEMOPS -fno-tree-loop-distribute-patterns

#
# 根据需要启用debug模式
#
test "$debug" = yes && CFLAGS_AUTO=-g

#
# 如果启用了调试，我们的汇编器又支持所需的指令，
# 预处理脚本也存在目标架构的处理方式，那么就在预处理汇编文件中添加额外的调试信息。
#
printf "检查是否应在预处理汇编文件中添加额外的调试信息ugging information... "
if fnmatch '-g*|*\ -g*' "$CFLAGS_AUTO $CFLAGS" &&
    test -f "$srcdir/tools/add-cfi.$ARCH.awk" &&
    printf ".file 1 \"srcfile.s\"\n.line 1\n.cfi_startproc\n.cfi_endproc" | $CC -g -x assembler -c -o /dev/null - 2>/dev/null; then
    ADD_CFI=yes
else
    ADD_CFI=no
fi
printf "%s\n" "$ADD_CFI"

#
# 可能向 CFLAGS 添加 -O 选项，
# 并根据 --enable-optimize 的状态和提供的 CFLAGS 选择使用 -O3 优化的模块。
#
printf "检查优化设置... "
case "x$optimize" in
xauto)
    if fnmatch '-O*|*\ -O*' "$CFLAGS_AUTO $CFLAGS"; then
        printf "使用给定的 CFLAGS 设置\n"
        optimize=no
    else
        printf "使用默认设置\n"
        optimize=yes
    fi
    ;;
xsize | xnone)
    printf "文件最小化构建\n"
    optimize=size
    ;;
xno | x)
    printf "禁用\n"
    optimize=no
    ;;
*) printf "自定义\n" ;;
esac

if test "$optimize" = no; then
    :
else
    tryflag CFLAGS_AUTO -O2
    tryflag CFLAGS_AUTO -fno-align-jumps
    tryflag CFLAGS_AUTO -fno-align-functions
    tryflag CFLAGS_AUTO -fno-align-loops
    tryflag CFLAGS_AUTO -fno-align-labels
    tryflag CFLAGS_AUTO -fira-region=one
    tryflag CFLAGS_AUTO -fira-hoist-pressure
    tryflag CFLAGS_AUTO -freorder-blocks-algorithm=simple ||
        tryflag CFLAGS_AUTO -fno-reorder-blocks
    tryflag CFLAGS_AUTO -fno-prefetch-loop-arrays
    tryflag CFLAGS_AUTO -fno-tree-ch
fi
test "$optimize" = yes && optimize="internal,malloc,string"

if fnmatch 'no|size' "$optimize"; then
    :
else
    printf "速度优化组建："
    while test "$optimize"; do
        case "$optimize" in
        *,*) this=${optimize%%,*} optimize=${optimize#*,} ;;
        *) this=$optimize optimize= ;;
        esac
        printf " $this"
        case "$this" in
        */*.c) ;;
        */*) this=$this*.c ;;
        *) this=$this/*.c ;;
        esac
        OPTIMIZE_GLOBS="$OPTIMIZE_GLOBS $this"
    done
    OPTIMIZE_GLOBS=${OPTIMIZE_GLOBS# }
    printf "\n"
fi

# Always try -pipe
tryflag CFLAGS_AUTO -pipe

#
# 如果禁用了调试，则省略帧指针。现代的 GCC 即使在启用调试时也会在大多数架构上省略帧指针，
# 因为帧指针不再是调试所必需的。
# 译者按：从提交来看，这里所谓现代，是指2012年
#
if fnmatch '-g*|*\ -g*' "$CFLAGS_AUTO $CFLAGS"; then
    :
else
    tryflag CFLAGS_AUTO -fomit-frame-pointer
fi

#
# 现代的 GCC 希望将 DWARF 表（用于调试和展开）放在程序的加载部分，这部分是不可剥离的。
# 这些选项将它们强制放回调试部分（如果调试关闭，则根本不会生成它们）。
#
tryflag CFLAGS_AUTO -fno-unwind-tables
tryflag CFLAGS_AUTO -fno-asynchronous-unwind-tables

#
# 尝试将每个函数和每个数据对象放在它们自己的段中。
# 这不仅允许在链接时进行额外的大小优化，还能避免一类危险的编译器/汇编器错误，
# 这些错误会导致相对地址表达式被汇编器常量折叠，即使其中一个或多个符号是可替换的。
# 参见 gas pr 18561 和 gcc pr 66609, 68178 等。
#
tryflag CFLAGS_AUTO -ffunction-sections
tryflag CFLAGS_AUTO -fdata-sections

# 译者按： 这两个flag可以使得每个函数和数据对象都放在自己的段中，这样可以更好的优化代码。

#
# 确保在 x86 上默认情况下没有启用不兼容的指令集扩展。
# 否则不利于构建静态二进制文件。
# 我们作弊使用 i486 而不是 i386，因为 i386 实际上无法正常工作（原子操作有问题）。
# 上述架构配置通过 CC 传递 -march 和 -mtune 选项，因此检查 CC 和 CFLAGS。
#
if test "$ARCH" = "i386"; then
    fnmatch '-march=*|*\ -march=*' "$CC $CFLAGS" || tryldflag CFLAGS_AUTO -march=i486
    fnmatch '-mtune=*|*\ -mtune=*' "$CC $CFLAGS" || tryldflag CFLAGS_AUTO -mtune=generic
fi

# 译者按：以下为一些警告和报错的的flag

#
# GCC 定义 -w 会覆盖任何 -W 选项，无论顺序如何；
# 但 clang 默认启用了许多烦人的警告，需要使用 -w 从头开始。
# 因此，如果使用 clang 构建，则使用 -w。
# 同时，无论使用哪种编译器，都关闭一个默认启用的常见类型转换警告。
#
test "$cc_family" = clang && tryflag CFLAGS_AUTO -w

tryflag CFLAGS_AUTO -Wno-pointer-to-int-cast

#
# 即使使用 -std=c99，gcc 也会接受一些违反约束的结构。
# 我们希望将这些视为错误，而不管是否启用了其他纯粹的风格警告——
# 尤其是隐式函数声明，这是一个危险的编程错误。
#
tryflag CFLAGS_AUTO -Werror=implicit-function-declaration
tryflag CFLAGS_AUTO -Werror=implicit-int
tryflag CFLAGS_AUTO -Werror=pointer-sign
tryflag CFLAGS_AUTO -Werror=pointer-arith
tryflag CFLAGS_AUTO -Werror=int-conversion
tryflag CFLAGS_AUTO -Werror=incompatible-pointer-types
tryflag CFLAGS_AUTO -Werror=discarded-qualifiers
tryflag CFLAGS_AUTO -Werror=discarded-array-qualifiers

# 译者按：
#  - implicit-function-declaration: 将隐式函数声明视为错误
#  - implicit-int: 将隐式返回类型声明为错误
#  - pointer-sign: 将不同类型的指针符号之间的赋值视为错误
#  - pointer-arith: 将指针算术运算视为错误
#  - int-conversion: 将不同类型的整数之间的赋值视为错误
#  - incompatible-pointer-types: 将不兼容的指针类型之间的赋值视为错误
#  - discarded-qualifiers: 将损失限定符（如const、volatile）的指针赋值视为错误
#  - discarded-array-qualifiers: 将损失限定符（如const、volatile）的数组赋值视为错误

#
# GCC 默认忽略未使用的参数，但 Clang 需要这个额外的参数
# 来停止在编译阶段传递的 LDFLAGS 和在链接阶段传递的 CFLAGS 的警告。
#
test "$cc_family" = clang && tryflag CFLAGS_AUTO -Qunused-arguments

if test "x$warnings" = xyes; then
    tryflag CFLAGS_AUTO -Waddress
    tryflag CFLAGS_AUTO -Warray-bounds
    tryflag CFLAGS_AUTO -Wchar-subscripts
    tryflag CFLAGS_AUTO -Wduplicate-decl-specifier
    tryflag CFLAGS_AUTO -Winit-self
    tryflag CFLAGS_AUTO -Wreturn-type
    tryflag CFLAGS_AUTO -Wsequence-point
    tryflag CFLAGS_AUTO -Wstrict-aliasing
    tryflag CFLAGS_AUTO -Wunused-function
    tryflag CFLAGS_AUTO -Wunused-label
    tryflag CFLAGS_AUTO -Wunused-variable
fi

# 译者按：
#   - address: 在进行错误的地址比较时发出警告
#   - array-bounds: 在数组越界时发出警告
#   - char-subscripts: 在使用字符作为数组下标时发出警告
#   - duplicate-decl-specifier: 在重复的声明说明符时发出警告（比如unsigned unsigned int x;）
#   - init-self: 在使用自己初始化自己的是否发出警告
#   - return-type: 在返回类型不匹配时发出警告
#   - sequence-point: 警告违反序列点规则的情况，（比如 i = i++）;
#   - strict-aliasing: 警告违反严格别名规则的情况，这可能导致未定义行为。
#   - unused-function: 在函数定义但未使用时发出警告
#   - unused-label: 在标签定义但未使用时发出警告
#   - unused-variable: 在变量定义但未使用时发出警告

# 确定编译器是否默认生成位置无关代码（PIC）。
# 如果是这样，我们就不需要为 libc.a 和 libc.so 编译单独的目标文件。
if trycppif __PIC__ "$CFLAGS_C99FSE $CPPFLAGS $CFLAGS"; then
    pic_default=yes
else
    pic_default=no
fi

# 译者按：以下为一些链接器的flag

# 根据数据对象的对齐要求对它们进行排序，这能够减少因对齐而浪费的空间。
# 该操作近似于最佳打包。
tryldflag LDFLAGS_AUTO -Wl,--sort-section,alignment
tryldflag LDFLAGS_AUTO -Wl,--sort-common

# 在链接动态库时，删除被其他翻译单元中的强定义替换的虚弱定义。
# 译者按：虚弱定义是直接翻译的，意思是仅作为占位符这类的内容。
# 提交中说预处理和链接都会处理这个问题但链接中处理的比较完整
tryldflag LDFLAGS_AUTO -Wl,--gc-sections

# 一些打了补丁的 GCC 构建默认设置被搞乱了...
# 译者按：该选项告诉链接器生成两种类型的哈希表（SysV和GNU）。
# 从提交中也没有看懂原来的注释是什么意思。当然可能是之前几次提交
tryldflag LDFLAGS_AUTO -Wl,--hash-style=both

# 如果存在未定义的符号，则阻止链接；
# 如果存在任何未定义的符号，libc.so 在运行时进行重定位处理时会崩溃。
# 这通常是由于未能链接编译器运行时库导致的；实现缺陷也是一种可能性。
# 译者按：简单来说，这个bug现在还没解决
tryldflag LDFLAGS_AUTO -Wl,--no-undefined

# 避免导出编译器运行时库中的符号。它们本应被隐藏，
# 但一些工具链（包括不支持动态库的旧版 GCC 和 pcc）不能使用这个。
# 译者按：flag的功能是删除动态库中的所有符号不将符号导入到可执行文件和动态库中
tryldflag LDFLAGS_AUTO -Wl,--exclude-libs=ALL

# 公共数据段的符号必须是可替换的，以允许复制重新定位，
# 但除此之外，我们希望在 libc 链接时绑定符号，
# 以消除启动重定位和 PLT 开销。
# 使用 --dynamic-list 而不是 -Bsymbolic-functions，是为了更好地控制哪些符号保持未绑定状态。
# 可替换的意思是符号未使用特殊方法处理可以直接替换。而为了减少替换的开销，他们准备了一个静态的符号链接表
tryldflag LDFLAGS_AUTO -Wl,--dynamic-list="$srcdir/dynamic.list"

# 查找编译器使用的运行时库
test -z "$LIBCC" && tryldflag LIBCC -lgcc && tryldflag LIBCC -lgcc_eh
test -z "$LIBCC" && tryldflag LIBCC -lcompiler_rt
test -z "$LIBCC" && try_libcc=$($CC -print-libgcc-file-name 2>/dev/null) &&
    tryldflag LIBCC "$try_libcc"
test -z "$LIBCC" && try_libcc=$($CC -print-file-name=libpcc.a 2>/dev/null) &&
    tryldflag LIBCC "$try_libcc"
printf "使用的编译器运行时库： %s\n" "$LIBCC"

# 确定具有变体的架构的变体
# 译者按：这句话很绕，意思是有一些架构是有变体的，
# 然后这段代码是在处理这些架构支持的变体，成为架构的变体
SUBARCH=
t="$CFLAGS_C99FSE $CPPFLAGS $CFLAGS"

if test "$ARCH" = "i386"; then
    printf "检查是否可以在PIC代码中使用ebx寄存器... "
    cat >"$tmpc" <<EOF
int foo(int x) { __asm__ ( "" : "+b"(x) ); return x; }
EOF
    if $CC $CFLAGS_C99FSE $CPPFLAGS $CFLAGS -fPIC \
        -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
        printf "是\n"
    else
        printf "否\n"
        CFLAGS_AUTO="$CFLAGS_AUTO -DBROKEN_EBX_ASM"
    fi
fi

if test "$ARCH" = "x86_64"; then
    trycppif __ILP32__ "$t" && ARCH=x32
fi

if test "$ARCH" = "arm"; then
    if trycppif __thumb2__ "$t"; then
        tryflag CFLAGS_AUTO -mimplicit-it=always
        tryflag CFLAGS_AUTO -Wa,-mimplicit-it=always
        tryflag CFLAGS_AUTO -Wa,-mthumb
    fi
    trycppif __ARMEB__ "$t" && SUBARCH=${SUBARCH}eb
    trycppif __ARM_PCS_VFP "$t" && SUBARCH=${SUBARCH}hf
    # 至少到 3.8 版本的 clang 对内联汇编中的浮点操作数使用了错误的约束码。
    # 检测到这一点后，受影响的源文件可以禁用这些汇编代码。
    if test "$cc_family" = clang; then
        printf "检查clang的vfp汇编约束是否有效... "
        echo 'float f(float x) { __asm__("":"+t"(x)); return x; }' >"$tmpc"
        if $CC $CFLAGS_C99FSE $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
            printf "是\n"
        else
            printf "否\n"
            CFLAGS_AUTO="$CFLAGS_AUTO -DBROKEN_VFP_ASM"
            CFLAGS_AUTO="${CFLAGS_AUTO# }"
        fi
    fi
fi

if test "$ARCH" = "aarch64"; then
    trycppif __AARCH64EB__ "$t" && SUBARCH=${SUBARCH}_be
fi

if test "$ARCH" = "loongarch64"; then
    trycppif __loongarch_soft_float "$t" && SUBARCH=${SUBARCH}-sf
    trycppif __loongarch_single_float "$t" && SUBARCH=${SUBARCH}-sp
    printf "检查汇编器是否支持 FCSR（浮点控制和状态寄存器）... "
    echo "__asm__(\"movfcsr2gr \$t0,\$fcsr0\");" >"$tmpc"
    if $CC -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
        printf "是\n"
    else
        printf "否\n"
        CFLAGS_AUTO="$CFLAGS_AUTO -DBROKEN_LOONGARCH_FCSR_ASM"
    fi
fi

if test "$ARCH" = "m68k"; then
    if trycppif "__HAVE_68881__"; then
        :
    elif trycppif "__mcffpu__"; then
        SUBARCH="-fp64"
    else
        SUBARCH="-sf"
    fi
fi

if test "$ARCH" = "mips"; then
    trycppif "__mips_isa_rev >= 6" "$t" && SUBARCH=${SUBARCH}r6
    trycppif "_MIPSEL || __MIPSEL || __MIPSEL__" "$t" && SUBARCH=${SUBARCH}el
    trycppif __mips_soft_float "$t" && SUBARCH=${SUBARCH}-sf
fi

if test "$ARCH" = "mips64"; then
    trycppif "_MIPS_SIM != _ABI64" "$t" && ARCH=mipsn32
    trycppif "__mips_isa_rev >= 6" "$t" && SUBARCH=${SUBARCH}r6
    trycppif "_MIPSEL || __MIPSEL || __MIPSEL__" "$t" && SUBARCH=${SUBARCH}el
    trycppif __mips_soft_float "$t" && SUBARCH=${SUBARCH}-sf
fi

if test "$ARCH" = "powerpc"; then
    trycppif "_SOFT_FLOAT || __NO_FPRS__" "$t" && SUBARCH=${SUBARCH}-sf
    printf "检查编译器是否可以在汇编代码中使用 'd' 约束... "
    echo 'double f(double x) { __asm__ ("fabs %0, %1" : "=d"(x) : "d"(x)); return x; }' >"$tmpc"
    if $CC $CFLAGS_C99FSE $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
        printf "yes\n"
    else
        printf "no\n"
        CFLAGS_AUTO="$CFLAGS_AUTO -DBROKEN_PPC_D_ASM"
        CFLAGS_AUTO="${CFLAGS_AUTO# }"
    fi
fi

test "$ARCH" = "microblaze" && trycppif __MICROBLAZEEL__ "$t" &&
    SUBARCH=${SUBARCH}el

if test "$ARCH" = "powerpc64"; then
    trycppif "_CALL_ELF == 2" "$t" || fail "$0: 错误：不支持 powerpc64 ABI"
    trycppif __LITTLE_ENDIAN__ "$t" && SUBARCH=${SUBARCH}le
    trycppif _SOFT_FLOAT "$t" && fail "$0: 错误：powerpc64上不支持软件浮点"
fi

if test "$ARCH" = "riscv64" -o "$ARCH" = "riscv32"; then
    trycppif __riscv_float_abi_soft "$t" && SUBARCH=${SUBARCH}-sf
    trycppif __riscv_float_abi_single "$t" && SUBARCH=${SUBARCH}-sp
fi

if test "$ARCH" = "sh"; then
    tryflag CFLAGS_AUTO -Wa,--isa=any
    trycppif __BIG_ENDIAN__ "$t" && SUBARCH=${SUBARCH}eb
    if trycppif "__SH_FPU_ANY__ || __SH4__" "$t"; then
        # 某些 sh 配置有问题，会将 double 替换为 float，
        # 而不是在存在 FPU 但仅支持单精度时使用软浮点。拒绝这些配置。
        printf "检查编译器的double类型是否是 IEEE 的double类型... "
        echo 'typedef char dblcheck[(int)sizeof(double)-5];' >"$tmpc"
        if $CC $CFLAGS_C99FSE $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
            printf "是\n"
        else
            printf "否\n"
            fail "$0: 错误：不支持编译器的浮点类型配置"
        fi
    else
        SUBARCH=${SUBARCH}-nofpu
    fi
    if trycppif __SH_FDPIC__ "$t"; then
        SUBARCH=${SUBARCH}-fdpic
    fi
fi

test "$SUBARCH" &&
    printf "为 %s 配置变体： %s\n" "$ARCH" "$ARCH$SUBARCH"

#
# 一些架构（如 powerpc）有不同的 long double 类型，
# 而编译器可以为其配置。是否支持这些类型的逻辑在 bits/float.h 中；
# 但通常情况下，不支持这些类型。我们需要在此检查是否存在不匹配，
# 否则 printf、strotd 和 scanf 中的代码将会严重错误，
# 因为它依赖于 (1) 宏的正确性，以及 (2) IEEE 语义。
#
printf "检查编译器的 long double 定义是否与 float.h 匹配... "
echo '#include <float.h>' >"$tmpc"
echo '#define C(m,s) (m==LDBL_MANT_DIG && s==sizeof(long double))' >>"$tmpc"
echo 'typedef char ldcheck[(C(53,8)||C(64,12)||C(64,16)||C(113,16))*2-1];' >>"$tmpc"
if $CC $CFLAGS_C99FSE \
    -I$srcdir/arch/$ARCH -I$srcdir/arch/generic -I$srcdir/include \
    $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" >/dev/null 2>&1; then
    printf "是\n"
else
    printf "否\n"
    fail "$0: 错误：不支持long double类型"
fi

#
# 一些构建系统会全局传递像 -ffast-math 这样错误的 CFLAGS 给所有包。
# 在较新的 GCC 上，我们可以检测到这一点并提前报错，
# 而不是生成一个严重错误的数学库。
#
if trycppif "__FAST_MATH__" \
    "$CFLAGS_C99FSE $CPPFLAGS $CFLAGS"; then
    fail "$0: 错误：编译器的浮点运算有问题；请检查 CFLAGS"
fi

printf "正在创建 config.mak... "

cmdline=$(quote "$0")
for i; do cmdline="$cmdline $(quote "$i")"; done

exec 3>&1 1>config.mak

cat <<EOF
# 该版本的config.mak 由以下命令生成:
# $cmdline
# 如果重新运行 configure，这里所做的任何更改都会丢失
AR = ${AR:-\$(CROSS_COMPILE)ar}
RANLIB = ${RANLIB:-\$(CROSS_COMPILE)ranlib}
ARCH = $ARCH
SUBARCH = $SUBARCH
ASMSUBARCH = $ASMSUBARCH
srcdir = $srcdir
prefix = $prefix
exec_prefix = $exec_prefix
bindir = $bindir
libdir = $libdir
includedir = $includedir
syslibdir = $syslibdir
CC = $CC
CFLAGS = $CFLAGS
CFLAGS_AUTO = $CFLAGS_AUTO
CFLAGS_C99FSE = $CFLAGS_C99FSE
CFLAGS_MEMOPS = $CFLAGS_MEMOPS
CFLAGS_NOSSP = $CFLAGS_NOSSP
CPPFLAGS = $CPPFLAGS
LDFLAGS = $LDFLAGS
LDFLAGS_AUTO = $LDFLAGS_AUTO
CROSS_COMPILE = $CROSS_COMPILE
LIBCC = $LIBCC
OPTIMIZE_GLOBS = $OPTIMIZE_GLOBS
ALL_TOOLS = $tools
TOOL_LIBS = $tool_libs
ADD_CFI = $ADD_CFI
MALLOC_DIR = $malloc_dir
EOF
test "x$static" = xno && echo "STATIC_LIBS ="
test "x$shared" = xno && echo "SHARED_LIBS ="
test "x$cc_family" = xgcc && echo 'WRAPCC_GCC = $(CC)'
test "x$cc_family" = xclang && echo 'WRAPCC_CLANG = $(CC)'
test "x$pic_default" = xyes && echo 'AOBJS = $(LOBJS)'
exec 1>&3 3>&-

test "$srcdir" = "." || ln -sf $srcdir/Makefile .

printf "完成\n"
